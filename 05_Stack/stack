1) reverse a stack using recursion.


pushing 49, into stack 1
                                                        i = free => i = 0
free = nextFree[i] => free = nextFree[0]                      => free = 1
previousTop[i] = top[sn] => previousTop[0] = top[1] => previousTop[0] = -1
top[sn] = i                                                 => top[1] = 0
                                                               arr[0] = 49
--------------------------------------
pushing 39, into stack 1
                                                        i = free => i = 1
free = nextFree[i] => free = nextFree[1]                      => free = 2
previousTop[i] = top[sn] => previousTop[1] = top[1] => previousTop[1] = 0
top[sn] = i                                                 => top[1] = 1
                                                               arr[1] = 39
--------------------------------------
pushing 9, into stack 0
                                                        i = free => i = 2
free = nextFree[i] => free = nextFree[2]                      => free = 3
previousTop[i] = top[sn] => previousTop[2] = top[0] => previousTop[2] = -1
top[sn] = i                                                 => top[0] = 2
                                                               arr[2] = 9
--------------------------------------
pushing 7, into stack 0
                                                        i = free => i = 3
free = nextFree[i] => free = nextFree[3]                      => free = -1
previousTop[i] = top[sn] => previousTop[3] = top[0] => previousTop[3] = 2
top[sn] = i                                                 => top[0] = 3
                                                               arr[3] = 7
--------------------------------------
popping from stack 1
i = top[sn] => i = top[1]                               => i = 1
top[sn] = previousTop[i] => top[1] = previousTop[1] =>top[1] = 0
nextFree[i] = free => nextFree[1] = free      => nextFree[1] = -1
free = i => free = 1                                 => free = 1
Popped element -> arr[1] = 39
--------------------------------------
popping from stack 0
i = top[sn] => i = top[0]                               => i = 3
top[sn] = previousTop[i] => top[0] = previousTop[3] =>top[0] = 2
nextFree[i] = free => nextFree[3] = free      => nextFree[3] = 1
free = i => free = 3                                 => free = 3
Popped element -> arr[3] = 7
--------------------------------------
pushing 82, into stack 1
                                                        i = free => i = 3
free = nextFree[i] => free = nextFree[3]                      => free = 1
previousTop[i] = top[sn] => previousTop[3] = top[1] => previousTop[3] = 0
top[sn] = i                                                 => top[1] = 3
                                                               arr[3] = 82
--------------------------------------
pushing 83, into stack 1
                                                        i = free => i = 1
free = nextFree[i] => free = nextFree[1]                      => free = -1
previousTop[i] = top[sn] => previousTop[1] = top[1] => previousTop[1] = 3
top[sn] = i                                                 => top[1] = 1
                                                               arr[1] = 83
--------------------------------------
popping from stack 1
i = top[sn] => i = top[1]                               => i = 1
top[sn] = previousTop[i] => top[1] = previousTop[1] =>top[1] = 3
nextFree[i] = free => nextFree[1] = free      => nextFree[1] = -1
free = i => free = 1                                 => free = 1
Popped element -> arr[1] = 83
--------------------------------------
